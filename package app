一、Package app 的工作本质是：
    将前端资源（h5,js,css,...）通过压缩包zip的形式打包发布。客户端在使用过程中异步下载安装更新压缩包。从而实现提升资源访问加载中性能问题。
二、具体工作过程如下：
1、windVane容器在客户端，这里可以简单理解为windvane分为packageApp（资源更新）和request（请求资源）。
  用户在使用APP时，发生资源请求，如请求某个JS文件。此时，会对资源URL进行拦截识别，如符合packageApp的规范则从本地读取文件，否则去CDN获取。
  去CDN获取和普通请求无异。
  从本地读取的文件时如发生本地文件中不存在，则依然会去CDN读取文件。如存在，则完成文件读取（这将大大节约了请求和加载时间）。
2、本地文件的更新：
  初始本地文件是随着APP一起发布的，用户下载客户端同时一起下载了初始资源。（解决首次访问无缓存问题）
  packageApp会校验当前资源的配置信息（包含版本和包地址）。
  客户端根据资源信息配置中的下载---校验---解压---安装。
  资源的配置信息则是定时去CDN拉取。
3、发布：
  资源压缩打包发布到CDN，同时配置好资源信息。这些资源和信息在CDN上等待packageAPP的定时读取。
4、特殊处理：
   发布资源到CDN时，因为是zip压缩文件。所以无法被普通的客户端URL请求直接获取，而当本地文件中不存在时，需要进行普通的资源请求。
   所以，发布资源到CDN时，同时会发布资源包里的内容到特定的CDN上，供客户端普通请求。
   
三、优点：
    1、解决首次加载缓存问题
    2、支持wifi下更新。节约用户流量，避免使用时更新带来的请求处理。
    3、类似“镜像”的包内文件同时发布在另一个域名CDN上，有不错的容灾应急处理。
四、数据支持：
    1、在某APP的首页、搜索页、列表页、订单页进行了数据对比，除首页外，提升均超过55%，部分页面达到提升80%，首页提升18%
    2、首页因外部资源比较多。所以对于包管理的依赖相对少，故而性能提升不及其他页面。
    
五、客户端还是服务端对比APP配置？
    1、客户端对比：
        首先客户端需要向服务器请求所有的配置信息，然后进行对比（主要通过更新字段标识：seq对比），找出对应资源增加或者修改或删除。
        这给客户端的逻辑增加了不少，带来不少复杂度。并且，全量下载所有的配置信息，消耗一定的流量。
    2、服务端对比：
        服务端负担会变大。但上述问题不复存在。同时，服务端可以不定期动态变更部署。这对用户来说相对无感。
    3、最终选用客户端。
 六、增量还是全量更新的选择：
    1、肯定是选择增量更新。在实现增量更新时，通过服务端判断代码包的变动（文件MD5）的多少，来决定增量还是全量。
    2、其实对于客户端而言，增量还是全量都不关心，都是下载之后解压，然后覆盖原有文件
 七、改进：
    1、见后续关于zCache的介绍
